# -*- coding: utf-8 -*-
"""Introdução

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/161pFeIU5rs23VbJTF-G8uYGBJa74LTtF

#INTRODUÇÃO

 A Linguagem Python surgiu no fim dos anos 80 em Amsterdam, na Holanda. Seu criador foi Guido Van Rossum, e ele tinha por objetivo criar uma linguagem mais simples do que as já existentes. Por esse motivo, sua sintaxe tende a ser de mais fácil comprensão, mesmo para aqueles que nunca programaram antes, já que é **orientada a objetos**. Pra quem já trabalhou com C/C++, por exemplo, uma ótima notícia: **não é preciso declarar variáveis**!!! Para quem nunca passou por isso, pode ficar mais feliz ainda! Não vai precisar passar agora. Assim, Python veio nos moldes de **Software Livre** e **Open Source** (mesmo antes desses termos existirem). Por esse motivo, existem várias maneiras de rodar Python, inclusive o aplicativo Colaboratory, no qual essa apostila é feita e que dispensa a instalação de qualquer programa.

 O intuito desse material é apresentar a linguagem de programação Python de uma forma simples, interativa e didática.

## PROGRAMAS DE PYTHON
  
A estrutura de Python se dá basicamente da seguinte forma:



> <b>O interpretador de Python roda um <font color="orange"><b>programa</b></font>, que o programador (você!) monta com <font color="orange"><b>definições</b></font> (valores) e <font color="orange"><b>comandos</b></font> (o que fazer com esses valores).</b>

Agora, podemos tentar entender melhor:
*   Um **programa** é uma sequência de definições e comandos
 *   **Definições** são os valores que você define para o programa ler. Por exemplo, você pode dizer ao programa que <font color="orange"><b>`a = 5`</b></font>.
 *   **Comandos** (statements) são instruções para o interpretador fazer algo. Você pode dar instruções usando as definições, por exemplo, dividir o `a` pelo número `10`: <font color="orange"><b>`a/10`</b></font>.

##SOBRE O COLABORATORY

 Como falamos acima, a linguagem Python pode ser rodada de diversas maneiras. Se você procurar na internet, provavelmente vai encontrar vários tutoriais sobre como baixar e instalar programas para interpretar Python, mas aqui a gente vai poupar você disso. É justamente para facilitar a sua vida que escolhemos esse ambiente de programação, o Colaboratory, para desenvolver a apostila.

>  
  Como você já percebeu, essa ferramenta é hospedada pelo Google Drive, o que nos garante dinamismo para compartilhar os **notebooks** da apostila.




  
  Assim como em "Planilhas Google" você pode criar uma planilha, e como em "Documentos Google" pode-se criar um documento de texto, **no Colaboratory você tem um notebook**. Esse, por exemplo é o notebook "Apostila - 01. Introdução".
  
  ***
  <font color = "grey">A título de curiosidade:
  
  A diferença mais relevante entre esse ambiente de programação e os outros é que esse é apenas interpretado, enquanto os outros costumam ser compilados para, então, serem interpretados. Para o nosso objetivo, isso não faz muita diferença. Mas na prática, o compilador tem vantagem por ser mais rápido. Em contra partida, os códigos sem compilador costumam ser mais facilmente corrigidos.</font>
  ***
  
  Até esse ponto, você só se deparou com textos aqui no Colaboratory, mas da mesma forma você pode escrever código. Isso acontece porque tudo o que se faz aqui é escrito em ambientes chamados células, que se dividem em células de texto e células de código (como você pode ver no topo do notebook, pode-se criar células "CODE" e células "TEXT"). Isso facilita, e muito, a nossa vida!
  
  Inclusive, se você abrir para editar as células de texto, vai ver que dentro delas as <font color = "orange"><b>cores</b></font> das palavras são definidas em HTML (igual a gente fazia com depoimento no orkut, lembra?), que é uma outra linguagem.
  
  Assim, o Colaboratory interpreta uma célula por vez, o que o torna bastante interativo e fácil de usar!

***
<font color="grey">
 <font color="grey"><b>Peculiaridades do Python</b></font>


*    <font color="grey"><b>Números decimais são representados com ponto:</b></font> Python foi criado em inglês e, portanto, existem algumas diferenças importantes! Os comandos são escritos em inglês, e também os números (as casas decimais são representadas por um ponto, por exemplo 3.4)
*  <font color="grey"><b>Letras maiúsculas e minúsculas são diferentes:</b></font> para a linguagem, `A` é diferente de `a`. Essa peculiridade dá a Python a característica de 'case-sensitive'.
*  <font color="grey"><b>Runtime type:</b></font> existe mais de uma versão de linguagem Python, e a mais usada atualmente é a Python 3. Acontece que no Colaboratory, o runtime pré-estipulado é o Python 2. Nesse primeiro momento, não há necessidade de entender bem o que significa runtime e essas diferentes versões (ufa!), mas é importante que você faça o seguinte:
 *   Clica lá em cima em <font color="grey"><b>Runtime</b></font>
 *   Em seguida, selecione a última opção que vai aparecer, <font color="grey"><b>Change runtime type</b></font>
 *   Por fim, onde tem "Python 2" troque para <font color="grey"><b>"Python 3"</b></font>
 *   Clique em <font color="grey"><b>save</b></font>.

 E pronto! Podemos seguir adiante.



***

## OBJETOS


*   Programas manipulam os dados em forma de <font color="orange"><b>objetos</b></font>
*   Objetos tem tipos (<font color="orange"><b>types</b></font>) que definem as coisas que o programa pode fazer com eles:
 *   Augusto é um <font color="orange"><b>humano</b></font>, então ele pode caminhar, falar português, etc
 *   Chewbacca é um  <font color="orange"><b>wookie</b></font> (do Universo de Star Wars), então ele pode caminhar, “mwaaarhrhh”, etc


*   Objetos podem ser divididos em:
  * Escalares (<font color="orange"><b>scalar</b></font>): não podem ser subdivididos (como um número)
  * Não-escalares (<font color="orange"><b>non-scalar</b></font>): objetos que tem estrutura interna que pode ser manipulada (como listas, mas eles só vão aparecer mais para frente)

**Esses conceitos "crus" não são de tão fácil compreensão, mas com os exemplos as coisas facilitam.**

**OBJETOS ESCALARES**



Para iniciar o aprendizado em Python é uma boa ideia entender quais são os principais objetos escalares usados na linguagem:
  * **`int`**: representam os números inteiros (ex: 5)
  * **`float`**: representam os números reais (ex: 3.2)
  * **`bool`**: representam valores Boolean, ou valores lógicos - que representam condições da forma verdadeiro ou falso (True and False)
  * **`NoneType`**: contém apenas um valor: None (nenhum)

***
<font color="grey">
**Dica: ** Caso você tenha uma dúvida sobre qual é o  tipo de um objeto, o próprio interpretador pode ajudar. Basta usar o comando <font color="orange">**`type( )`**</font>. Olha só:
***
"""

a = 5
b = 3.75
c = True
d = None

type(a)

type(b)

type(c)

type(d)

"""***
<font color="grey">
**Adendo:** O código no Colaboratory está dando erro?


Um ponto bem importante para ficar atento: o Colaboratory **não necessariamente executa o programa na ordem** em que foi escrito. Perceba que se você rodar as células acima (clicando no símbolo de "play" que aparece passando o cursor do mouse pelas chaves do início da célula), a ordem de execução fica enumerada entre esses colchetes.

Caso o seu programa não esteja funcionando, verifique a ordem em que ele está rodando! Não adianta você querer pedir o **`type`** de **c** se nunca foi dito quem é **c**.
***

##ATRIBUINDO VALORES A VARIÁVEIS

* Uma <font color="orange">**variável**</font> é apenas um nome que faz referência a um objeto. Por exemplo, podemos definir  uma variável `a` e atribuir a ela o valor `2`;
*  O sinal de igual (**=**) representa essa atribuição. Quando estipula-se que **a=2** não significa que **2=a**. Significa que o valor associado a **a** é **2** (Mais uma da série: sei que é complicado, depois melhora);
* O valor fica armazenado na variável, mas pode ser alterado a qualquer momento, simplemente atribuindo um novo valor, por exemplo **a=3** (agora, `a`, que era `2`, é `3`. simples assim);
* Uma <font color="orange">**atribuição**</font> (assignment) une o **nome** ao **valor**.
"""

pi = 3.1459
aprox_pi = 22/7

"""Agora que eu chamei meu valor (`3.1459`) de um nome (`pi`), provalvemente, no resto do meu código, eu vou continuar usando somente o nome (`pi`). E daí, se eu quiser meu valor (`3.1495`), como faz? É fácil!
* **recupere** o valor associado ao nome ou à variável "chamando" seu nome

"""

pi

aprox_pi

"""***
<font color="grey">
** Como nomear uma variável?**

Para o programa entender que estamos falando de uma variável, é preciso começar seu nome com uma letra (como convenção, no Python, as variáveis normalmente começam com letras minúsculas).

Atenção: existem algumas **palavras reservadas em Python** (elas nomeiam funções, comandos do programa) que não podem ser utilizadas como nomes de variáveis!
Mas é bem fácil de notar quais palavras não podem. Se você escrever a palavra no programa e ela se tornar <font color = "orange">colorida</font>, então você **não** pode chamar sua variável assim.


***

##CONVERSÕES DE TIPO (CAST)


*   O tipo de um objeto pode ser alterado
 *   **Exemplo:**
 *   O valor `3` pode ser um objeto do tipo inteiro, mas você quer usar ele numa situação que requer ele com casas decimais. Para isso, você pode usar o comando de conversões.
 *  Da mesma forma, o contrário pode acontecer: você tem o número `3.8` e na verdade quer trabalhar com ele como um inteiro. Usando essa mesma ferramenta, podemos ter o `3.8` convertido para `3`.
"""

float(3)

int(3.8)

"""Apesar de usualmente arredondarmos o `3.8` para `4`, o Python não faz assim. Para o programa, o comando <font color="orange">**`int()`**</font> vai **apenas  remover as casas decimais**. Se quisermos arredondar esse valor, **devemos dizer isso ao programa**, usando o comando <font color="orange">**`round()`**</font>.


"""

round(4.5)

round(4.4)

"""Existe, ainda, a possibilidade de escolher como arredondar *(sabe quando você fica torcendo pro professor "arredondar pra cima"? É tipo assim)*. Tem um módulo (um conjunto de funções que não "mora" na biblioteca Python, mas pode ser "emprestado") que tem as funções <font color="orange">**`ceil()`**</font> e <font color="orange">**`floor()`**</font>, que nos permitem arredondar os números para o **próximo inteiro**, com <font color="orange">**`ceil()`**</font> ou para o **inteiro anterior**, com <font color="orange"><b>`floor()`</b></font>."""

from math import ceil, floor #Importamos justamente porque, como eu disse, ele não "mora" no Python

floor(4.9)

ceil(7.1)

"""##EXPRESSÕES


*   A combinação de objetos e operadores formam <font color="orange"><b>expressões</b></font>.
*   Uma expressão tem um valor, e esse valor tem um <font color="orange"><b>tipo</b></font>. (De novo: eu sei que é confuso, mas depois melhora! Prometo)
*   A sintaxe para as expressões básicas em Python segue o padrão objeto-operador-objeto:



>### objeto operador objeto
*   i + j <font color="orange"><b> -> soma</b></font>
* i - j  <font color="orange"><b>-> diferença</b></font>
* i \* j  <font color="orange"><b>-> produto</b></font>
* i / j  <font color="orange"><b>-> divisão</b></font>
* i % j  <font color="orange"><b>-> o resto da divisão de i por j</b></font>
* i ** j  <font color="orange"><b>-> i na potência j</b></font>






"""

2+3

8/4

8%5

"""O interpretador de Python vai considerar a mesma precedência (regras de prioridade) de fazer contas que a gente usa. Por exemplo, se você precisa calcular `5+2*2`, você sabe que deve realizar a multiplicação antes, a não ser que exista um par de parênteses dizendo o contrário.

A <font color="orange"><b> precedência</b></font> considerada aqui é:

  * \*\*
  *   /
  *   *
  *  \+ e – são executados da esquerda para a direita

Perceba a diferença: para a nossa matemática, divisão e multiplicação são feitas na ordem em que aparecerem na conta. Aqui, a divisão vai ser executada antes.


"""

2 + 3 * 4  #Aqui ele considera a precedência do Python: primeiro a multiplicação e depois a soma.

(2 + 3) * 4   #Nessa equação, os parênteses indicam que a soma será feita antes da multiplicação.

"""Outro exemplo sobre a precedência:"""

2 / 3 * 4  #Neste exemplo, perceba que somente o '3' está dividindo o '2', o número '4' está multiplicando a divisão '2/3'

2 / (3 * 4)  #Para que os dois números dividam o '2', é só colocar os parênteses!

"""##ABSTRAINDO EXPRESSÕES

Mas, por que dar nome aos valores? A ideia é que você possa utilizá-los depois chamando-os pelo nome, ao invés de usar os valores em si.

Por exemplo, sabe quando seu professor de física te dá um problemão para resolver, e fica falando para só trocar as variáveis pelos números no final do problema? Então, a gente sabe que é um bom conselho, porque fica muito mais fácil de achar o erro sabendo quais variáveis estão na fórmula do que um montão de números sem significado nenhum.
A mesma coisa acontece com um código bem grandão que você pode escrever no Python: quando você precisar mudar algum valor,  ter um nome para suas variáveis pode facilitar muito as coisas!


O ideal é **sempre dar nomes com significados às variáveis**, e não chamá-las simplesmente de **a**, **b**, **c**... Assim, o código fica mais fácil de ser compreendido.
"""

#BOM:

pi = 3.14159
raio = 50

área = pi * raio ** 2
área

#RUIM:

a = 3.14
b = 10

c = a * b ** 2
c

"""***
<font color="grey">
**Dica:** o símbolo **#** serve para fazer comentários em células de código, e aí o que estiver escrito depois do símbolo não é **interpretado**.
***

##PROGRAMAÇÃO vs MATEMÁTICA

A matemática que estamos acostumados não funciona tão bem em alguns pontos na programação, principalmente na parte de resolver funções.

Aqui nós não resolvemos a função para a variável, e sim atribuimos um novo valor a ela.

**OI?!**

Calma que melhora! Sempre melhora (:

**Segue um exemplo:**
"""

y = 2
y = 2 * y  # Aqui, para a matemática não faria sentido, já que estaríamos dizendo que 2=4
#Como na programação as coisas são diferentes, na verdade estamos usando o valor antigo de y para calcular um novo valor para y!
y

"""##TROCANDO ATRIBUIÇÕES

Existem casos em que uma variável está vinculada a outras variáveis. No exemplo abaixo,  a variável `área` está vinculada às variáveis `raio` e `pi`.


Assim, é possível reatribuir o valor dessa variável vinculada (`área`) através da mudança do valor atribuído à segunda variável (`raio`).
>No primeiro momento, ao `raio` foi atribuido o valor `2.2`, e portanto, a `área=15.21` também foi guardada na memória do programa.
Mas é possível reatribuir o valor da `área` trocando o valor do `raio`.


**Cuidado:** O valor da variável  `área` não será reatribuido automáticamente no momento em que o 'raio' receber um novo valor. Para receber o novo valor da `área` é preciso dar o comando ao programa para calculá-la novamente!
"""

pi = 3.14159
raio = 2.2

print('Valor inicial do raio é {:.2f}'.format(raio))

print('      -> Agora calculamos a área')

área = pi * raio ** 2

print('A área é {:.2f}'.format(área))

print('      -> Agora queremos aumentar nosso raio em 1')

raio = raio + 1

print('O novo raio é {:.2f}'.format(raio))

print('Mas a área continua {:.2f}'.format(área))

print('      -> Agora recalculamos a área')

area = pi * raio ** 2

print('A nova área é {:.2f}'.format(área))

"""***

**Adendo:** Tem várias coisas que ainda são meio estranhas nesse exemplo acima, mas relaxa que elas serão melhor explicadas mais para frente. Algumas já podemos destrinchar aqui:


*   <font color="orange"> **`print('   ')`** </font>: tudo o que você escrever entre `' '` será "impresso", como aconteceu no exemplo acima.
*   <font color="orange"> <b>`print(' {}'.format(    ))`</b></font>: Esse comando grandão vale, simplesmente, para você conseguir imprimir suas variáveis entre o seu texto! Ao invés de escrever o valor da variável, você pode chamar a variável pelo nome colocando as chaves { } no meio do texto.

  Exemplo: print('O novo raio é { }'.format(raio)) - no lugar das chaves { } será impresso o valor do raio.

*   <font color="orange"> <b>`print(' {:.2f}'.format(    ))`</b></font>:  Aqui é quase a mesma coisa, só tem mais um detalhe: o **:.2f** significa que estamos dizendo ao programa imprimir o valor com duas casas decimais!

Além disso, perceba que a linha <font color="orange"> <b>`área = pi * radius ** 2`</b></font> do código não foi "impressa" quando o código foi rodado. Isso acontece porque a área foi apenas** calculada**, e o interpretador só vai **"imprimir"** se você mandar ele fazer isso.
***

##EXERCÍCIOS

1. Faça um programa que, dada a temperatura  T em graus Fahrenheit, transforme a temperatura em graus Celsius.



> $T = 100 ºF $


> $C = (5/9) * (F-32)$
"""



"""2. Faça um programa que, dados dois números inteiros e um número real, calcule e mostre: (a=15, b=-8, c=4.6)
> * o produto do dobro do primeiro com metade do segundo .
>* a soma do triplo do primeiro com o terceiro.
> * o terceiro elevado ao cubo.
"""

